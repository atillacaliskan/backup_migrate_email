<?php

/**
 * @file
 * Backup Migrate Email module file.
 */

use Drupal\Core\Mail\MailFormatHelper;

/**
 * Implements hook_mail().
 */
function backup_migrate_email_mail($key, &$message, $params)
{
    switch ($key) {
        case 'backup_file':
            $message['subject'] = $params['subject'];
            $message['body'][] = $params['body'];

            // Add attachment if provided.
            if (isset($params['attachment'])) {
                $attachment = $params['attachment'];

                // Try different attachment methods for compatibility
                if (isset($attachment['filepath']) && file_exists($attachment['filepath'])) {
                    // File-based attachment (preferred)
                    $message['attachments'][] = [
                        'filename' => $attachment['filename'],
                        'filepath' => $attachment['filepath'],
                        'mimetype' => $attachment['mimetype'],
                    ];
                } elseif (isset($attachment['content'])) {
                    // Content-based attachment (fallback)
                    $message['attachments'][] = [
                        'filename' => $attachment['filename'],
                        'content' => $attachment['content'],
                        'mimetype' => $attachment['mimetype'],
                    ];
                }

                // Also set in params for modules that look there
                $message['params']['attachments'][] = $attachment;
            }
            break;
    }
}

/**
 * Implements hook_backup_migrate_controller_listall_alter().
 * 
 * This is a custom hook that we'll implement by overriding the controller.
 */
/**
 * Implements hook_entity_query_alter().
 */
function backup_migrate_email_entity_query_alter(\Drupal\Core\Entity\Query\QueryInterface $query)
{
    // Check if this is a backup_migrate_destination query
    if ($query->getEntityTypeId() === 'backup_migrate_destination') {
        // Check if we're on the backup listing page
        $route_match = \Drupal::routeMatch();
        $route_name = $route_match->getRouteName();

        if ($route_name === 'backup_migrate.backups') {
            // Exclude email destinations from the query using NOT IN
            $query->condition('type', ['Email'], 'NOT IN');
        }
    }
}
